version: "3"

vars:
  LDFLAGS: "-s -w"
  BIN_DIR: "bin"
  # Default platforms to build for
  PLATFORMS:
    sh: echo "darwin/arm64 darwin/amd64 linux/amd64 linux/arm64"

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BIN_DIR}}

  build:
    desc: Build binaries for specified platforms (default all)
    deps: [clean]
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - |
        for platform in {{.PLATFORMS}}; do
          IFS="/" read -r os arch <<< "$platform"
          echo "Building for $os/$arch..."
          env CGO_ENABLED=0 GOOS=$os GOARCH=$arch go build -ldflags="{{.LDFLAGS}}" -o {{.BIN_DIR}}/strender-$os-$arch .
        done
    status:
      - test -d {{.BIN_DIR}}

  build-local:
    desc: Build for current platform only
    internal: true
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - go build -ldflags="{{.LDFLAGS}}" -o {{.BIN_DIR}}/strender .

  install:
    desc: Build and install to ~/bin/strender
    vars:
      ARCH:
        sh: arch
      PLATFORM:
        sh: uname | tr '[:upper:]' '[:lower:]'
    cmds:
      - task: build
        vars:
          CLI_ARGS: "{{.PLATFORM}}/{{.ARCH}}"
      - cp {{.BIN_DIR}}/strender-{{.PLATFORM}}-{{.ARCH}} ~/bin/strender
    preconditions:
      - sh: test -d ~/bin
        msg: "~/bin directory does not exist"

  publish:
    desc: Publish binaries to an existing GitHub release (requires version argument)
    deps: [build]
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "ERROR: Must provide release version as argument"
          echo "Usage: task publish -- v1.0.0"
          exit 1
        fi

        RELEASE_TAG="{{.CLI_ARGS}}"

        # Check if release exists
        if ! gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
          echo "ERROR: Release $RELEASE_TAG does not exist"
          echo "Available releases:"
          gh release list --limit 10
          exit 1
        fi

        echo "Publishing binaries to release $RELEASE_TAG..."

        # Upload each binary with a descriptive label
        gh release upload "$RELEASE_TAG" \
          "{{.BIN_DIR}}/strender-darwin-arm64#MacOS Arm64" \
          "{{.BIN_DIR}}/strender-darwin-amd64#MacOS x64" \
          "{{.BIN_DIR}}/strender-linux-arm64#Linux Arm64" \
          "{{.BIN_DIR}}/strender-linux-amd64#Linux x64" \
          --clobber

        echo "Successfully published binaries to release $RELEASE_TAG"

    preconditions:
      - sh: command -v gh >/dev/null 2>&1
        msg: "GitHub CLI (gh) is required but not installed"

  publish-draft:
    desc: Create a draft release and publish binaries (requires version argument)
    deps: [build]
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "ERROR: Must provide release version as argument"
          echo "Usage: task publish-draft -- v1.0.0"
          exit 1
        fi

        RELEASE_TAG="{{.CLI_ARGS}}"

        # Check if release already exists
        if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
          echo "ERROR: Release $RELEASE_TAG already exists"
          echo "Use 'task publish -- $RELEASE_TAG' to update an existing release"
          exit 1
        fi

        echo "Creating draft release $RELEASE_TAG and publishing binaries..."

        # Create draft release with binaries
        gh release create "$RELEASE_TAG" \
          --draft \
          --generate-notes \
          --title "$RELEASE_TAG" \
          "{{.BIN_DIR}}/strender-darwin-arm64#MacOS Arm64" \
          "{{.BIN_DIR}}/strender-darwin-amd64#MacOS x64" \
          "{{.BIN_DIR}}/strender-linux-arm64#Linux Arm64" \
          "{{.BIN_DIR}}/strender-linux-amd64#Linux x64"

        echo "Successfully created draft release $RELEASE_TAG with binaries"
        echo "Visit GitHub to review and publish the release"
    preconditions:
      - sh: command -v gh >/dev/null 2>&1
        msg: "GitHub CLI (gh) is required but not installed"

  unrelease:
    desc: Delete a GitHub release
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "ERROR: Must provide release version as argument"
          echo "Usage: task unrelease -- v1.0.0"
          exit 1
        fi

        gh release delete {{.CLI_ARGS}} --yes
        git push origin --delete {{.CLI_ARGS}} || echo "Tag may not exist remotely"

  list-releases:
    desc: List GitHub releases
    cmds:
      - gh release list --limit 20
    preconditions:
      - sh: command -v gh >/dev/null 2>&1
        msg: "GitHub CLI (gh) is required but not installed"

  structurizr-pull:
    desc: Download latest Structurizr UI files from GitHub
    vars:
      FRONTEND_DIR: "renderer/frontend"
      BASE_URL: "https://raw.githubusercontent.com/structurizr/ui/refs/heads/main/src"
    cmds:
      - mkdir -p {{.FRONTEND_DIR}}/js {{.FRONTEND_DIR}}/css
      # Download JS files
      - curl -o {{.FRONTEND_DIR}}/js/structurizr.js {{.BASE_URL}}/js/structurizr.js
      - curl -o {{.FRONTEND_DIR}}/js/structurizr-content.js {{.BASE_URL}}/js/structurizr-content.js
      - curl -o {{.FRONTEND_DIR}}/js/structurizr-diagram.js {{.BASE_URL}}/js/structurizr-diagram.js
      - curl -o {{.FRONTEND_DIR}}/js/structurizr-ui.js {{.BASE_URL}}/js/structurizr-ui.js
      - curl -o {{.FRONTEND_DIR}}/js/structurizr-util.js {{.BASE_URL}}/js/structurizr-util.js
      - curl -o {{.FRONTEND_DIR}}/js/structurizr-workspace.js {{.BASE_URL}}/js/structurizr-workspace.js
      # Download CSS files
      - curl -o {{.FRONTEND_DIR}}/css/structurizr.css {{.BASE_URL}}/css/structurizr.css
      - curl -o {{.FRONTEND_DIR}}/css/structurizr-diagram.css {{.BASE_URL}}/css/structurizr-diagram.css

  dev:
    desc: Run in development mode with watch
    cmds:
      - task: build-local
      - ./{{.BIN_DIR}}/strender -watch -browser "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" -outdir ./out big-bank-plc.json

  debug:
    desc: Run in debug mode (non-headless)
    cmds:
      - task: build-local
      - ./{{.BIN_DIR}}/strender -debug -outdir ./out big-bank-plc.json
